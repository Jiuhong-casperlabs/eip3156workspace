memo


amount:2222

1, allowance in flash_borrow 

args:
  "owner" => topaddress,
   "spender" => lender

then allowance in erc20:
                allowance(&self, owner: Address, spender: Address) -> 0

2, flashfee in flash_borrow ->2 
   _repayment = amount + flashfee = 2222+2 =2224

3, erc20 approve

runtime_args! {
"spender" => lender,
"amount" => _allowance + _repayment, 2224

                erc20:
                pub fn approve(&mut self, spender: Address, amount: U256) -> Result<(), Error> {
                        let owner = detail::get_immediate_caller_address()?;
                        self.write_allowance(owner, spender, amount);
                        ->  self.write_allowance(borrower, lender, 2224);

lender.flash_loan
runtime_args! {
    "receiver"=> topaddress, => borrower
    "token" => token,
    "amount"=> amount,  =>2222
    "data" => "data",
                        This is lender
                        pub fn flash_loan(
                            flashlender: &EIP3156LENDER,
                            receiver: Address, => borrower
                            token: Address,
                            amount: U256,  =>2222
                            data: String,
                        ) 

                        erc20 transfer:
                        runtime_args! {
                            "recipient" => receiver,
                            "amount" => amount,
                        },
                                       This is erc20 
                                       pub fn transfer(&mut self, recipient: Address, amount: U256) -> Result<(), Error> {
                                        let sender = detail::get_immediate_caller_address()?; => lender
                                        self.transfer_balance(sender, recipient, amount) = (lender, borrower, 2222)
                                    }
                                    then sender balance: 50000-2222
                                         receiver balance: 2222
                        call receiver's on_flash_loan
                        runtime_args! {
                            "initiator" => msgsender,   => borrower
                            "token" => token,
                            "amount" => amount,
                            "fee" => flashfee,
                            "data" => data
                        }
                                        This is receiver:
                                        let lender = self.read_lender_address();
                                        on_flash_loan(
                                            lender: Address,
                                            initiator: Address, => borrower
                                            _token: Address,
                                            _amount: U256,
                                            _fee: U256,
                                            _data: String,
                                        )

                        call erc20 transfer_from
                        runtime_args! {
                            "owner" => receiver,
                            "recipient" => call_stack_element_to_address(topstack), => lender
                            "amount" => amount + flashfee, 2224
                        },
                           
                                This is erc20 transfer_from
                                pub fn transfer_from(
                                    &mut self,
                                    owner: Address,  => borrower
                                    recipient: Address, => lender
                                    amount: U256,   =>2224
                                ) -> Result<(), Error> {
                                    let spender = detail::get_immediate_caller_address()?;  => lender
                                    if amount.is_zero() {
                                        return Ok(());
                                    }
                                    let spender_allowance = self.read_allowance(owner, spender);
                                    let new_spender_allowance = spender_allowance
                                        .checked_sub(amount)
                                        .ok_or(Error::InsufficientAllowance)?;  => 2224 - 2224 = 0
                                    self.transfer_balance(owner, recipient, amount)?; = (borrower, lender, 2224)
                                    self.write_allowance(owner, spender, new_spender_allowance);
                                    Ok(())
                                }

                                // self.write_allowance(borrower, lender, 2224); previously